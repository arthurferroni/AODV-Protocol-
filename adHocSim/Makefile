#
#  Makefile for adHocSim
#
#  ** This file was automatically generated by the command:
#  opp_makemake -f -o adHocSim
#

# Name of target to be created (-o option)
TARGET = adHocSim

# User interface (uncomment one) (-u option)
# USERIF_LIBS=$(CMDENV_LIBS)
USERIF_LIBS=$(TKENV_LIBS)

# uncomment 1 of the 3 lines to support either serial or parallel operation
KERNEL_LIBS=$(STD_KERNEL_LIBS)
# KERNEL_LIBS=$(PVM_KERNEL_LIBS)
# KERNEL_LIBS=$(MPI_KERNEL_LIBS)

# .ned or .h include paths with -I
INCLUDE_PATH=

# misc additional object and library files to link
EXRA_OBJS=

# object files in subdirectories
SUBDIR_OBJS=

# Additional libraries (-L option -l option)
LIBS=

#------------------------------------------------------------------------------

NEDC=nedc
MSGC=opp_msgc
CXX=g++
CC=gcc
AR=ar cr
SHLIB_LD=g++ -shared -fPIC
MAKEDEPEND=opp_makedep -Y --objdirtree

CFLAGS=-O3 -DNDEBUG=1  -fPIC
NEDCFLAGS=-Wno-unused
LDFLAGS=
EXE_SUFFIX=

OMNETPP_INCL_DIR=/home/nic/omnetpp/include
OMNETPP_LIB_DIR=/home/nic/omnetpp/lib

TK_LIBS=-L/usr/X11R6/lib -lX11 -ltk8.3 -ltcl8.3
MPI_LIBS=
PVM_LIBS=-lgpvm3 -lpvm3
SYS_LIBS=-ldl -lstdc++ 
SYS_LIBS_PURE=-ldl -lsocket -lnsl -lm $(shell $(CXX) -print-file-name=libstdc++.a)

# User interface libs
CMDENV_LIBS=-lenvir -lcmdenv
TKENV_LIBS=-lenvir -ltkenv $(TK_LIBS)

# Simulation kernel
STD_KERNEL_LIBS=-lsim_std
MPI_KERNEL_LIBS=-lsim_mpi $(MPI_LIBS)
PVM_KERNEL_LIBS=-lsim_pvm $(PVM_LIBS)

# Simulation kernel and user interface libraries
OMNETPP_LIBS=-L$(OMNETPP_LIB_DIR) $(USERIF_LIBS) $(KERNEL_LIBS) $(SYS_LIBS)

COPTS=$(CFLAGS) $(INCLUDE_PATH) -I$(OMNETPP_INCL_DIR)
NEDCOPTS=$(CFLAGS) $(NEDCFLAGS) $(INCLUDE_PATH) -I$(OMNETPP_INCL_DIR)

#------------------------------------------------------------------------------

# Object files from this directory to link
OBJS= mobileHost_n.o simple_n.o world_n.o  aodv.o application.o mac.o normal.o physic.o pursuit.o randomDirection.o randomWalk.o randomWP.o restrictedRandWalk.o

$(TARGET): $(OBJS) $(EXRA_OBJS) Makefile 
	$(CXX) $(LDFLAGS) $(OBJS) $(EXRA_OBJS) $(SUBDIR_OBJS) $(LIBS) $(OMNETPP_LIBS) -o $(TARGET)

purify: $(OBJS) $(EXRA_OBJS)   Makefile
	purify $(CXX) $(LDFLAGS) $(OBJS) $(EXRA_OBJS) $(SUBDIR_OBJS) $(LIBS) -L$(OMNETPP_LIB_DIR) $(KERNEL_LIBS) $(USERIF_LIBS) $(SYS_LIBS_PURE) -o $(TARGET).pure

mobileHost_n.o: mobileHost_n.cc
	$(CXX) -c $(NEDCOPTS) mobileHost_n.cc

mobileHost_n.cc: mobileHost.ned
	$(NEDC) $(INCLUDE_PATH) mobileHost.ned

simple_n.o: simple_n.cc
	$(CXX) -c $(NEDCOPTS) simple_n.cc

simple_n.cc: simple.ned
	$(NEDC) $(INCLUDE_PATH) simple.ned

world_n.o: world_n.cc
	$(CXX) -c $(NEDCOPTS) world_n.cc

world_n.cc: world.ned
	$(NEDC) $(INCLUDE_PATH) world.ned

aodv.o: aodv.cc
	$(CXX) -c $(COPTS) aodv.cc

application.o: application.cc
	$(CXX) -c $(COPTS) application.cc

mac.o: mac.cc
	$(CXX) -c $(COPTS) mac.cc

normal.o: normal.cc
	$(CXX) -c $(COPTS) normal.cc

physic.o: physic.cc
	$(CXX) -c $(COPTS) physic.cc

pursuit.o: pursuit.cc
	$(CXX) -c $(COPTS) pursuit.cc

randomDirection.o: randomDirection.cc
	$(CXX) -c $(COPTS) randomDirection.cc

randomWalk.o: randomWalk.cc
	$(CXX) -c $(COPTS) randomWalk.cc

randomWP.o: randomWP.cc
	$(CXX) -c $(COPTS) randomWP.cc

restrictedRandWalk.o: restrictedRandWalk.cc
	$(CXX) -c $(COPTS) restrictedRandWalk.cc


doc: neddoc.html htmldocs

neddoc.html:  mobileHost.ned simple.ned world.ned
	@opp_neddoc  mobileHost.ned simple.ned world.ned > neddoc.html
	@echo File neddoc.html generated.

htmldocs:
	@doxygen -g- | sed "s/^PROJECT_NAME.*/PROJECT_NAME = adHocSim/;\
	s|^INPUT *=.*|INPUT = . |;\
	s/^EXTRACT_ALL *=.*/EXTRACT_ALL = yes/;\
	s/^EXTRACT_PRIVATE *=.*/EXTRACT_PRIVATE = yes/;\
	s/^EXCLUDE_PATTERNS *=.*/EXCLUDE_PATTERNS = *_n.cc *_n.h/;\
	s/^ALPHABETICAL_INDEX *=.*/ALPHABETICAL_INDEX = yes/;\
	s/^HTML_OUTPUT *=.*/HTML_OUTPUT = htmldoc/;\
	s/^GENERATE_LATEX *=.*/GENERATE_LATEX = no/;\
	s/^GENERATE_TREEVIEW *=.*/GENERATE_TREEVIEW = yes/;\
	s/^HIDE_UNDOC_RELATIONS *=.*/HIDE_UNDOC_RELATIONS = no/;\
	s|^TAGFILES *=.*|TAGFILES = /home/nic/omnetpp/doc/api/opptags.xml=/home/nic/omnetpp/doc/api|;\
	s|^GENERATE_TAGFILE *=.*|GENERATE_TAGFILE = htmldoc/tags.xml|;\
	s/^QUIET *=.*/QUIET = yes/" > doxy.cfg
	@doxygen doxy.cfg
	@echo Code documentation generated. Now, point your web browser to ./htmldoc/index.html.

clean:
	rm -f *.o *_n.cc *_n.h *_m.cc *_m.h $(TARGET)$(EXE_SUFFIX)
	rm -f *.vec *.sca
	rm -rf neddoc.html htmldoc

depend:
	$(MAKEDEPEND) $(INCLUDE_PATH) -- *.cc
	# $(MAKEDEPEND) $(INCLUDE_PATH) -fMakefile.in -- *.cc

re-makemake:
	opp_makemake -f  -o adHocSim   #recreate Makefile

re-makemake-m:
	opp_makemake -f -m  -o adHocSim   #recreate Makefile.in


# DO NOT DELETE THIS LINE -- make depend depends on it.
aodv.o: aodv.cc \
  h/aodv.h \
  h/aodvCostants.h \
  h/costants.h
application.o: application.cc \
  h/application.h \
  h/costants.h \
  h/physic.h
mac.o: mac.cc \
  h/mac.h \
  h/costants.h
normal.o: normal.cc \
  h/normal.h \
  h/costants.h \
  h/physic.h
physic.o: physic.cc \
  h/physic.h \
  h/costants.h
pursuit.o: pursuit.cc \
  h/pursuit.h \
  h/costants.h \
  h/physic.h
randomDirection.o: randomDirection.cc \
  h/randomDirection.h \
  h/costants.h \
  h/physic.h
randomWalk.o: randomWalk.cc \
  h/randomWalk.h \
  h/costants.h \
  h/physic.h
randomWP.o: randomWP.cc \
  h/randomWP.h \
  h/costants.h \
  h/physic.h
restrictedRandWalk.o: restrictedRandWalk.cc \
  h/restrictedRandWalk.h \
  h/costants.h \
  h/physic.h
